/**
 * Заголовок модуля. Содержит объявления функций, которые реализует модуль.
 * 
 * Используйте этот код как шаблон для создания собственных модулей отрисовки
 * для Glitch Mint Logo. Все объявленные ниже функции модуля должны быть определены
 * в нём, если вам не нужны какие-то из функций, просто оставьте их пустыми.
 * 
 * Структура модуля:
 * - Файл resources.c содержит код инициализации и освобождения ресурсов.
 * - Файл draw.c содержит код рендеринга кадра.
 * Данная структура модуля не обязательна, но рекомендуется для однообразия
 * всех модулей. Вы можете добавить или убрать любые файлы в модуле, а также
 * использовать любые библиотеки.
 * 
 * В папке ../util/ собраны различные утилиты, которые могут понадобиться разным модулям:
 * ../util/random.h - функции для генерации рандома
 * ../util/util.h - удобные функции, такие как u32min, i32max, mix(color_t, color_t)
 * ../util/read_png.h - чтение png файла с помощью библиотеки libpng
 * ../util/render_glyth.h - рендеринг глифа с помощью библиотеки freetype
 * 
 * 
 * Изменение FPS
 * Чтобы изменить FPS, просто в функции gml_setup присвойте нужное значение
 * переменной fps (объявлена в common.h). По умолчанию используется чатота
 * обновления монитора. Если вы хотите получить fps по умолчанию, то прочитайте
 * эту переменную в функции gml_setup_after_drm.
 */

#include "../common.h"

// Следующие функции вызываются в том порядке, в котором объявлены

/** Читает конфиг из файла */
void gml_read_config(config_t*);

/** Загружает и инициализирует ресурсы модуля */
void gml_setup(void);

/**
 * Загружает и инициализирует ресурсы модуля после загрузки libdrm.
 * Используйте эту функцию, если какие-то ресурсы требуют ширину и высоту
 * экрана для инициализации.
 * @param width - ширина экрана.
 * @param height - высота экрана.
 */
void gml_setup_after_drm(uint32_t width, uint32_t height);


/**
 * Рендерит кадр в переданную память. Примечание: не стоит полагаться на то,
 * что осталось в памяти после предыдущего кадра, так как каждый кадр происходит
 * смена буферов для двойной буферизации. Изначально память не инициализирована.
 * @param tick - номер такта.
 * @param width - ширина фрейма.
 * @param height - высота фрейма.
 * @param frame - массив размером width * height, куда рендерится кадр.
 */
void gml_draw(int tick, uint32_t width, uint32_t height, color_t* frame);


/**
 * Освобождает ресурсы модуля перед освобождением ресурсов libdrm.
 * Используйте эту функцию для освобождения ресурсов, выделенных в gml_setup_after_drm.
 */
void gml_cleanup_before_drm(void);

/**
 * Освобождает ресурсы модуля.
 * Используйте эту функцию для освобождения ресурсов, выделенных в gml_setup.
 */
void gml_cleanup(void);